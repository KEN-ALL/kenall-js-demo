{"version":3,"sources":["pages/autocomplete.tsx","pages/index.tsx","App.tsx","index.tsx"],"names":["SENTINEL","jisx0402","old_code","postal_code","prefecture","prefecture_kana","city","city_kana","town","town_kana","town_raw","town_kana_raw","koaza","kyoto_street","building","floor","town_partial","town_addressed_koaza","town_multi","town_chome","corporation","api","KENALL","process","apibase","searchAddresses","cache","generateKeyFromOptions","options","query","limit","a","k","undefined","candidates","Autocomplete","React","useState","address","setAddress","setCandidates","onCandidatesRequested","value","result","suggestions","Error","data","onSuggestionsFetchRequested","onSuggestionsClearRequested","onSuggestionSelected","e","suggestion","suggestionValue","suggestionIndex","sectionIndex","method","getSuggestionValue","candidate","block_lot","renderSuggestion","className","substring","renderSuggestionsContainer","containerProps","children","ref","restOfContainerProps","message","String","count","inputProps","placeholder","onChange","currentTarget","Index","App","to","path","ReactDOM","render","StrictMode","basename","document","getElementById"],"mappings":"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","file":"static/js/main.5b70b784.chunk.js","sourcesContent":["import React from 'react';\nimport Autosuggest, { OnSuggestionSelected, RenderSuggestionsContainer } from 'react-autosuggest';\nimport { KENALL, Address, AddressSearcherOptions } from '@ken-all/kenall';\n\ntype Candidates = {\n  count: number;\n  data: Address[];\n}\n\nconst SENTINEL: Address = {\n  jisx0402: \"\",\n  old_code: \"\",\n  postal_code: \"\",\n  prefecture: \"\",\n  prefecture_kana: \"\",\n  city: \"\",\n  city_kana: \"\",\n  town: \"\",\n  town_kana: \"\",\n  town_raw: \"\",\n  town_kana_raw: \"\",\n  koaza: \"\",\n  kyoto_street: \"\",\n  building: \"\",\n  floor: \"\",\n  town_partial: false,\n  town_addressed_koaza: false,\n  town_multi: false,\n  town_chome: false,\n  corporation: null,\n};\n\nconst api = new KENALL(process.env.REACT_APP_KENALL_API_KEY as string, {apibase: 'https://api-beta.kenall.jp/v1'})\n\ntype AddressSearcher = (options: AddressSearcherOptions) => Promise<Candidates>;\n\nconst searchAddresses: AddressSearcher = (() => {\n  const cache: {[k: string]: Candidates;} = {};\n  const generateKeyFromOptions = (options: AddressSearcherOptions): string => (\n    `${options.query}:${options.limit}` \n  );\n  return async (options: AddressSearcherOptions) => {\n    const k = generateKeyFromOptions(options);\n    let candidates: Candidates | undefined = cache[k];\n    if (candidates === undefined) {\n      candidates = await api.searchAddresses(options);\n      cache[k] = candidates;\n    }\n    return candidates;\n  };\n})();\n\nconst Autocomplete: React.FunctionComponent = () => {\n  const [address, setAddress] = React.useState<string>('');\n  const [candidates, setCandidates] = React.useState<Candidates | Error | undefined>(undefined);\n\n  const onCandidatesRequested = async ({ value: address }: { value: string }) => {\n    setAddress(address);\n    if (!address) {\n      setCandidates(undefined);\n      return;\n    }\n    try {\n      const result = await searchAddresses({\n        query: address,\n        limit: 20,\n      });\n      setCandidates(result);\n    } catch (e) {\n      setCandidates(e);\n    }\n  };\n\n  const onCandidatesClearRequested = () => {\n    setCandidates(undefined);\n  };\n\n  const onCandidateSelected: OnSuggestionSelected<Address> = (e, { suggestion, suggestionValue, suggestionIndex, sectionIndex, method }) => {\n    setAddress(suggestionValue);\n  };\n\n  const renderCandidate = (candidate: Address) => (\n    <>\n      <span className=\"text-base font-mono w-24 flex-shrink-0\">〒{candidate.postal_code.substring(0,3)}-{candidate.postal_code.substring(3)}</span>\n      <span className=\"text-sm ml-2\">{candidate.prefecture}{candidate.city}{candidate.town} {candidate.kyoto_street}{candidate.koaza}{candidate?.corporation?.block_lot}{candidate.building}{candidate.floor}</span>\n    </>\n  );\n\n  const renderCandidatesContainer: RenderSuggestionsContainer = ({ containerProps, children }) => {\n    const { ref, className, ...restOfContainerProps } = containerProps;\n    return (\n      <div {...restOfContainerProps} className={`${className} divide-y divide-gray-200 divide-solid`}>\n        {candidates !== undefined && (\n          candidates instanceof Error ? (\n            <div ref={ref}>\n              <ul className=\"react-autosuggest__suggestions-list\">\n                <li className=\"react-autosuggest__suggestion\">\n                  <span className=\"text-base text-red-300 mr-2\">取得時にエラーが発生しました</span>\n                  <span className=\"text-sm text-red-200\">{candidates.message}</span>\n                </li>\n              </ul>\n            </div>\n          ) : (\n            <>\n              <div className=\"overflow-y-scroll max-h-48\" ref={ref}>{children}</div>\n              <div className=\"text-sm text-gray-400 py-1 px-4 flex flex-row justify-end\">\n                <div>{String(candidates.count)}件</div>\n              </div>\n            </>\n          )\n        )}\n      </div>\n    );\n  };\n\n  return (\n    <section className=\"flex flex-col\">\n      <style jsx global>{`\n.react-autosuggest__container {\n  @apply relative;\n}\n\n.react-autosuggest__input {\n  @apply text-lg p-2 m-0 w-full rounded-md border border-gray-200;\n}\n\n.react-autosuggest__input--focused {\n  @apply focus:outline-none;\n}\n\n.react-autosuggest__input--open {\n}\n\n.react-autosuggest__suggestions-container {\n  @apply absolute z-10 hidden rounded-md border border-gray-200;\n}\n\n.react-autosuggest__suggestions-container--open {\n  @apply block;\n}\n\n.react-autosuggest__suggestions-list {\n  @apply m-0 p-0;\n}\n\n.react-autosuggest__suggestion {\n  @apply cursor-pointer py-2 px-4 flex flex-row flex-nowrap items-baseline;\n}\n\n.react-autosuggest__suggestion--highlighted {\n  @apply bg-blue-100;\n}\n\n.container {\n  @apply flex;\n}\n      \n      `}</style>\n      <header className=\"flex-1 align-center\">\n        <h1 className=\"mb-5 text-3xl font-bold text-gray-500\">Autocomplete</h1>\n      </header>\n      <main className=\"flex-1\">\n        <div>\n          <div className=\"mb-1\">\n            <label>住所を入力</label>\n          </div>\n          <div className=\"text-lg w-9/12\">\n            <Autosuggest\n              suggestions={candidates !== undefined && !(candidates instanceof Error) ? candidates.data : [SENTINEL]}\n              onSuggestionsFetchRequested={onCandidatesRequested}\n              onSuggestionsClearRequested={onCandidatesClearRequested}\n              onSuggestionSelected={onCandidateSelected}\n              getSuggestionValue={(candidate) => `${candidate.prefecture}${candidate.city}${candidate.town} ${candidate.kyoto_street || ''}${candidate.koaza || ''}${candidate?.corporation?.block_lot || ''}${candidate.building || ''}${candidate.floor || ''}`}\n              renderSuggestion={renderCandidate}\n              renderSuggestionsContainer={renderCandidatesContainer}\n              inputProps={{\n                placeholder: '住所を入力',\n                value: address,\n                onChange: (e) => {\n                  const value = (e.currentTarget as HTMLInputElement).value;\n                  if (typeof value === 'string') {\n                    setAddress((e.currentTarget as HTMLInputElement).value);\n                  }\n                },\n              }}\n            />\n          </div>\n        </div>\n      </main>\n    </section>\n  );\n};\n\nexport default Autocomplete;\n","import React from 'react';\n\nconst Index: React.FunctionComponent = () => {\n  return <section className=\"flex flex-col\">\n    <header>\n      <h1 className=\"mb-5 text-3xl font-bold text-gray-500\">ケンオール デモページ</h1>\n    </header>\n    <main>\n      <p className=\"mb-2\">サイドバーからデモを選択してください。</p>\n    </main>\n  </section>\n};\n\nexport default Index;\n","import React from 'react';\nimport { Link, Switch, Route } from 'react-router-dom';\nimport Index from './pages/index';\nimport Autocomplete from './pages/autocomplete';\n\nfunction App() {\n  return (\n    <div className=\"flex\">\n      <aside className=\"m-5\">\n        <header>\n          <h1 className=\"px-3 mb-3 text-lg\"><Link to=\"/\">ケンオール</Link></h1>\n        </header>\n        <ul>\n          <li><Link to=\"/autocomplete\" className=\"px-3 py-2 text-gray-500\">Autocomplete</Link></li>\n        </ul>\n      </aside>\n      <main className=\"flex-1 m-5\">\n        <Switch>\n          <Route path=\"/autocomplete\">\n            <Autocomplete />\n          </Route>\n          <Route path=\"/\">\n            <Index />\n          </Route>\n        </Switch> \n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport App from './App';\nimport './index.css';\n\nconst baseUrl = process.env.REACT_APP_BASE_URL || '/';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router basename={baseUrl}>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}