{"version":3,"sources":["pages/lookup.tsx","pages/reverse-lookup.tsx","pages/index.tsx","App.tsx","index.tsx"],"names":["SENTINEL","data","apiBaseUrl","process","REACT_APP_KENALL_API_BASE_URL","api","KENALL","apibase","timeout","canonicalizePostalCode","postalCode","replace","c","String","fromCharCode","charCodeAt","getAddresses","cache","a","undefined","k","length","candidates","getAddress","countVariations","items","callback","variations","Indicator","className","Form","timerId","setTimerId","useForm","getValues","setValue","register","watch","reset","handleSubmit","React","useState","timerRunning","setTimerRunning","watchFields","useEffect","clearTimeout","prefecture","city","address1","address2","then","canonical","window","setTimeout","candidate","jisx0402","substring","addresses","address","corporation","block_lot","building","floor","elements","kyoto_street","push","town","koaza","join","buildAddressLines","onSubmit","console","log","htmlFor","id","type","minLength","maxLength","pattern","autoComplete","placeholder","required","value","onClick","Lookup","old_code","postal_code","prefecture_kana","city_kana","town_kana","town_raw","town_kana_raw","town_partial","town_addressed_koaza","town_multi","town_chome","searchAddresses","generateKeyFromOptions","options","query","limit","ReverseLookup","setAddress","setCandidates","onCandidatesRequested","result","suggestions","Error","onSuggestionsFetchRequested","onSuggestionsClearRequested","onSuggestionSelected","e","suggestion","suggestionValue","suggestionIndex","sectionIndex","method","getSuggestionValue","renderSuggestion","renderSuggestionsContainer","containerProps","children","ref","restOfContainerProps","message","count","inputProps","onChange","currentTarget","Index","href","App","menuShown","setMenuShown","stopPropagation","to","fill","viewBox","xmlns","fillRule","d","clipRule","path","baseUrl","REACT_APP_BASE_URL","ReactDOM","render","StrictMode","basename","document","getElementById"],"mappings":"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","file":"static/js/main.5cede898.chunk.js","sourcesContent":["import React from 'react';\nimport { useForm } from 'react-hook-form';\nimport { KENALL, Address } from '@ken-all/kenall';\n\ntype Candidates = {\n  data: Address[];\n}\n\ntype AddressForm = {\n  postal: string;\n  prefecture: string;\n  city: string;\n  address1: string;\n  address2: string;\n};\n\nconst SENTINEL: Candidates = {\n  data: [],\n};\n\nconst apiBaseUrl = process.env.REACT_APP_KENALL_API_BASE_URL || 'https://api.kenall.jp/v1';\n\nconst api = new KENALL(process.env.REACT_APP_KENALL_API_KEY as string, {apibase: apiBaseUrl, timeout: 10000})\n\nconst canonicalizePostalCode = (postalCode: string): string => (\n  postalCode\n  .replace(/-/g, '')\n  .replace(\n    /[０１２３４５６７８９]/g,\n    (c) => String.fromCharCode(\n      '0'.charCodeAt(0) +\n      (c.charCodeAt(0) - '０'.charCodeAt(0))\n    )\n  )\n);\n\nconst getAddresses = (() => {\n  const cache: {[k: string]: Candidates;} = {};\n  return async (postalCode: string | undefined): Promise<[string, Candidates]> => {\n    if (postalCode === undefined) {\n      return [\"\", SENTINEL];\n    }\n    const k = canonicalizePostalCode(postalCode);\n    if (k.length < 7) {\n      return [postalCode, SENTINEL];\n    }\n    let candidates: Candidates | undefined = cache[k];\n    if (candidates === undefined) {\n      candidates = await api.getAddress(k);\n      cache[k] = candidates;\n    }\n    return [k, candidates || SENTINEL];\n  };\n})();\n\nconst countVariations = <T extends unknown>(items: Iterable<T>, callback: (item: T) => any): number => {\n  const c: Record<any, number> = {};\n  let variations = 0;\n  for (const item of items) {\n    const k = callback(item);\n    if (c[k] === undefined) {\n      variations++;\n      c[k] = 1;\n    } else {\n      c[k]++;\n    }\n  }\n  return variations;\n};\n\nconst buildAddressLines = (addresses: Address[]): [string, string] => {\n  // 候補なしの場合\n  if (addresses.length === 0) {\n    return [\"\", \"\"];\n  } else if (addresses.length === 1) {\n    const address = addresses[0];\n    // 個別事業所番号\n    if (address.corporation) {\n      return [address.corporation.block_lot, address.building + address.floor];\n    } else {\n      // 住所の要素を組み立てる\n      const elements: string[] = [];\n      if (address.kyoto_street) {\n        elements.push(address.kyoto_street);\n      }\n      elements.push(address.town);\n      if (address.koaza) {\n        elements.push(address.koaza);\n      }\n      return [elements.join(\" \"), addresses[0].building + addresses[0].floor];\n    }\n  } else {\n    // 都道府県や市区町村のバリエーションが複数ある場合は\n    // 補完しても意味がないので補完は行わない\n    if (countVariations(addresses, (address) => address.prefecture) > 1\n        || countVariations(addresses, (address) => address.city) > 1) {\n      return [\"\", \"\"];\n    }\n\n    // 町域が複数ある場合も補完しない\n    const nTowns = countVariations(addresses, (address) => address.town);\n    if (nTowns > 1) {\n      return [\"\", \"\"];\n    }\n\n    // 住所の要素を組み立てる\n    const elements: string[] = [];\n\n    const nKoazas = countVariations(addresses, (address) => address.koaza);\n    if (nKoazas === 1) {\n      const nKyotoStreets = countVariations(addresses, (address) => address.kyoto_street);\n      if (nKyotoStreets === 1) {\n        elements.push(addresses[0].kyoto_street);\n      }\n      elements.push(addresses[0].town);\n      elements.push(addresses[0].koaza);\n    } else {\n      elements.push(addresses[0].town);\n    }\n\n    return [elements.join(\" \"), \"\"];\n  }\n};\n\nconst Indicator: React.FunctionComponent<{ className?: string | undefined }> = ({ className }) => {\n  return (\n    <div className={`overflow-hidden w-0 h-0 rounded-lg p-1 bg-red-400 animate-ping ${className}`}></div>\n  );\n};\n\nconst Form: React.FunctionComponent<{\n  timerId: number | undefined;\n  setTimerId: (id: number | undefined) => void;\n}> = ({timerId, setTimerId}) => {\n  const { getValues, setValue, register, watch, reset, handleSubmit } = useForm<AddressForm>();\n  const [timerRunning, setTimerRunning] = React.useState<boolean>(false);\n\n  const onSubmit = (data: AddressForm) => {\n    console.log(data);\n  };\n\n  const watchFields = watch(['postal', 'prefecture', 'city', 'address1', 'address2']);\n\n  React.useEffect(\n    () => {\n      // タイマーがすでに動いていればキャンセルする\n      if (timerId !== undefined) {\n        clearTimeout(timerId);\n        setTimerId(undefined);\n        setTimerRunning(false);\n      }\n      // すでに入力済みであれば何もしない\n      const [postalCode, prefecture, city, address1, address2] = watchFields;\n      if (prefecture || city || address1 || address2) {\n        return;\n      }\n      getAddresses(postalCode).then(\n        ([canonical, candidates]) => {\n          // 整形済みの値をセットする\n          setValue('postal', canonical);\n          // Promiseの後なので、watchFieldsの値は古くなっている可能性があるから\n          // 再度チェックする\n          {\n            const [prefecture, city, address1, address2] = getValues(['prefecture', 'city', 'address1', 'address2']);\n            if (prefecture || city || address1 || address2) {\n              return;\n            }\n          }\n          // 候補がない場合にも補完は実行しない\n          if (candidates.data.length === 0) {\n            return;\n          }\n          // ブラウザのautocompleteを邪魔しないように2秒後に補完を発動する\n          const timerId = window.setTimeout(\n            () => {\n              setTimerRunning(false);\n              // 再度バリデーション\n              {\n                const [prefecture, city, address1, address2] = getValues(['prefecture', 'city', 'address1', 'address2']);\n                if (prefecture || city || address1 || address2) {\n                  return;\n                }\n              }\n              const candidate = candidates.data[0];\n              setValue('prefecture', candidate.jisx0402.substring(0, 2));\n              setValue('city', candidate.city);\n              const [address1, address2] = buildAddressLines(candidates.data);\n              setValue('address1', address1);\n              setValue('address2', address2);\n            },\n            2000\n          );\n          setTimerId(timerId);\n          setTimerRunning(true);\n        }\n      );\n    },\n    watchFields\n  );\n\n  return <>\n    <style jsx>{`\n.form-field-main {\n  @apply md:mb-0 mb-3;\n}\n\n.form-field-elem {\n  @apply border-gray-300 rounded-md;\n}\n\n.form-label {\n  @apply md:mt-2;\n}\n\n.form-label.nogap {\n  @apply md:mt-0;\n}\n\n.form-label-main {\n  display: block;\n}\n\n.form-label-main.required::after {\n  @apply text-gray-500 text-xs;\n  content: \"*\";\n  vertical-align: super;\n}\n\n.form-label-aux {\n  display: block;\n  @apply text-sm;\n}\n\n@media (min-width: 768px) {\n  .md-form-field-horiz {\n    grid-template-columns: minmax(8rem,10rem) minmax(20rem,1fr);\n  }\n}\n    `}</style>\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <div className=\"grid gap-2 md-form-field-horiz grid-cols-1\">\n        <label htmlFor=\"form-postal\" className=\"form-label\">\n          <span className=\"form-label-main required\">郵便番号</span>\n        </label>\n        <div className=\"form-field-main\">\n          <input\n            id=\"form-postal\"\n            type=\"text\"\n            minLength={7}\n            maxLength={8}\n            pattern=\"\\d*\"\n            autoComplete=\"shipping postal-code\"\n            placeholder=\"郵便番号\"\n            className=\"form-field-elem w-28\"\n            {...register('postal', { required: '郵便番号を入力してください' })}\n          />\n        </div>\n\n        <label htmlFor=\"form-prefecture\" className=\"form-label\">\n          <span className=\"form-label-main required\">都道府県</span>\n        </label>\n        <div className=\"form-field-main\">\n          <div className=\"relative inline-block\">\n            <select\n              id=\"form-prefecture\"\n              autoComplete=\"shipping address-level1\"\n              className=\"form-field-elem w-28\"\n              {...register('prefecture', { required: '都道府県を入力してください' })}\n            >\n              <option value=\"\">(選択)</option>\n              <option value=\"01\">北海道</option>\n              <option value=\"02\">青森県</option>\n              <option value=\"03\">岩手県</option>\n              <option value=\"04\">宮城県</option>\n              <option value=\"05\">秋田県</option>\n              <option value=\"06\">山形県</option>\n              <option value=\"07\">福島県</option>\n              <option value=\"08\">茨城県</option>\n              <option value=\"09\">栃木県</option>\n              <option value=\"10\">群馬県</option>\n              <option value=\"11\">埼玉県</option>\n              <option value=\"12\">千葉県</option>\n              <option value=\"13\">東京都</option>\n              <option value=\"14\">神奈川県</option>\n              <option value=\"15\">新潟県</option>\n              <option value=\"16\">富山県</option>\n              <option value=\"17\">石川県</option>\n              <option value=\"18\">福井県</option>\n              <option value=\"19\">山梨県</option>\n              <option value=\"20\">長野県</option>\n              <option value=\"21\">岐阜県</option>\n              <option value=\"22\">静岡県</option>\n              <option value=\"23\">愛知県</option>\n              <option value=\"24\">三重県</option>\n              <option value=\"25\">滋賀県</option>\n              <option value=\"26\">京都府</option>\n              <option value=\"27\">大阪府</option>\n              <option value=\"28\">兵庫県</option>\n              <option value=\"29\">奈良県</option>\n              <option value=\"30\">和歌山県</option>\n              <option value=\"31\">鳥取県</option>\n              <option value=\"32\">島根県</option>\n              <option value=\"33\">岡山県</option>\n              <option value=\"34\">広島県</option>\n              <option value=\"35\">山口県</option>\n              <option value=\"36\">徳島県</option>\n              <option value=\"37\">香川県</option>\n              <option value=\"38\">愛媛県</option>\n              <option value=\"39\">高知県</option>\n              <option value=\"40\">福岡県</option>\n              <option value=\"41\">佐賀県</option>\n              <option value=\"42\">長崎県</option>\n              <option value=\"43\">熊本県</option>\n              <option value=\"44\">大分県</option>\n              <option value=\"45\">宮崎県</option>\n              <option value=\"46\">鹿児島県</option>\n              <option value=\"47\">沖縄県</option>\n            </select>\n            {timerRunning && <Indicator className=\"absolute -top-1 -right-1\" />}\n          </div>\n        </div>\n\n        <label htmlFor=\"form-city\" className=\"form-label nogap\">\n          <span className=\"form-label-main required\">市区町村</span>\n          <span className=\"form-label-aux\">(例: 川崎市川崎区)</span>\n        </label>\n        <div className=\"form-field-main\">\n          <div className=\"relative inline-block\">\n            <input\n              id=\"form-city\"\n              type=\"text\"\n              autoComplete=\"shipping address-level2\"\n              placeholder=\"市区町村\"\n              className=\"form-field-elem md:w-52 w-full\"\n              {...register('city', { required: '市区町村を入力してください' })}\n            />\n            {timerRunning && <Indicator className=\"absolute -top-1 -right-1\" />}\n          </div>\n        </div>\n\n        <label htmlFor=\"form-address1\" className=\"form-label nogap\">\n          <span className=\"form-label-main required\">町域・番地</span>\n          <span className=\"form-label-aux\">(例: 旭町1-1)</span>\n        </label>\n        <div className=\"form-field-main\">\n          <div className=\"relative inline-block\">\n            <input\n              id=\"form-address1\"\n              type=\"text\"\n              autoComplete=\"shipping address-line1\"\n              placeholder=\"町域・番地\"\n              className=\"form-field-elem md:w-52 w-full\"\n              {...register('address1', { required: '町域・番地を入力してください' })}\n            />\n            {timerRunning && <Indicator className=\"absolute -top-1 -right-1\" />}\n          </div>\n        </div>\n\n        <label htmlFor=\"form-address2\" className=\"form-label nogap\">\n          <span className=\"form-label-main\">建物名など</span>\n          <span className=\"form-label-aux\">(例: ○○マンション101号)</span>\n        </label>\n        <div className=\"form-field-main\">\n          <div className=\"relative inline-block\">\n            <input\n              id=\"form-address2\"\n              type=\"text\"\n              autoComplete=\"shipping address-line2\"\n              placeholder=\"建物名など\"\n              className=\"form-field-elem w-full\"\n              {...register('address2')}\n            />\n            {timerRunning && <Indicator className=\"absolute -top-1 -right-1\" />}\n          </div>\n        </div>\n      </div>\n\n      <div className=\"mt-6 flex md:flex-row md:max-w-xl flex-col space-y-2 md:space-y-0 md:space-x-2\">\n        <button\n          type=\"reset\"\n          className=\"rounded-md bg-gray-300 p-2 flex flex-1 justify-center item-center\"\n          onClick={() => reset()}\n        >\n          <span>フォームをリセットする</span>\n        </button>\n        <button\n          type=\"submit\"\n          className=\"rounded-md bg-gray-300 p-2 flex flex-1 justify-center item-center\"\n        >\n          <span>Submit (実際には何も起こりません)</span>\n        </button>\n      </div>\n    </form>\n  </>;\n};\n\nconst Lookup: React.FunctionComponent = () => {\n  const [timerId, setTimerId] = React.useState<number | undefined>();\n\n  React.useEffect(\n    () => (\n      () => {\n        if (timerId !== undefined) {\n          window.clearTimeout(timerId);\n        }\n      }\n    ),\n    []\n  );\n\n  return (\n    <section className=\"flex flex-col\">\n      <header className=\"flex-1 align-center\">\n        <h1 className=\"mb-5 text-3xl font-bold text-gray-500\">郵便番号正引き検索</h1>\n      </header>\n      <main className=\"flex-1\">\n        <Form timerId={timerId} setTimerId={setTimerId} />\n      </main>\n    </section>\n  );\n};\n\nexport default Lookup;\n","import React from 'react';\nimport Autosuggest, { OnSuggestionSelected, RenderSuggestionsContainer } from 'react-autosuggest';\nimport { KENALL, Address, AddressSearcherOptions } from '@ken-all/kenall';\n\ntype Candidates = {\n  count: number;\n  data: Address[];\n}\n\nconst SENTINEL: Address = {\n  jisx0402: \"\",\n  old_code: \"\",\n  postal_code: \"\",\n  prefecture: \"\",\n  prefecture_kana: \"\",\n  city: \"\",\n  city_kana: \"\",\n  town: \"\",\n  town_kana: \"\",\n  town_raw: \"\",\n  town_kana_raw: \"\",\n  koaza: \"\",\n  kyoto_street: \"\",\n  building: \"\",\n  floor: \"\",\n  town_partial: false,\n  town_addressed_koaza: false,\n  town_multi: false,\n  town_chome: false,\n  corporation: null,\n};\n\nconst apiBaseUrl = process.env.REACT_APP_KENALL_API_BASE_URL || 'https://api-beta.kenall.jp/v1';\n\nconst api = new KENALL(process.env.REACT_APP_KENALL_API_KEY as string, {apibase: apiBaseUrl, timeout: 10000})\n\ntype AddressSearcher = (options: AddressSearcherOptions) => Promise<Candidates>;\n\nconst searchAddresses: AddressSearcher = (() => {\n  const cache: {[k: string]: Candidates;} = {};\n  const generateKeyFromOptions = (options: AddressSearcherOptions): string => (\n    `${options.query}:${options.limit}` \n  );\n  return async (options: AddressSearcherOptions) => {\n    const k = generateKeyFromOptions(options);\n    let candidates: Candidates | undefined = cache[k];\n    if (candidates === undefined) {\n      candidates = await api.searchAddresses(options);\n      cache[k] = candidates;\n    }\n    return candidates;\n  };\n})();\n\nconst ReverseLookup: React.FunctionComponent = () => {\n  const [address, setAddress] = React.useState<string>('');\n  const [candidates, setCandidates] = React.useState<Candidates | Error | undefined>(undefined);\n\n  const onCandidatesRequested = async ({ value: address }: { value: string }) => {\n    setAddress(address);\n    if (!address) {\n      setCandidates(undefined);\n      return;\n    }\n    try {\n      const result = await searchAddresses({\n        query: address,\n        limit: 20,\n      });\n      setCandidates(result);\n    } catch (e) {\n      setCandidates(e);\n    }\n  };\n\n  const onCandidatesClearRequested = () => {\n    setCandidates(undefined);\n  };\n\n  const onCandidateSelected: OnSuggestionSelected<Address> = (e, { suggestion, suggestionValue, suggestionIndex, sectionIndex, method }) => {\n    setAddress(suggestionValue);\n  };\n\n  const renderCandidate = (candidate: Address) => (\n    <>\n      <span className=\"text-base font-mono w-24 flex-shrink-0\">〒{candidate.postal_code.substring(0,3)}-{candidate.postal_code.substring(3)}</span>\n      <span className=\"text-sm ml-2\">{candidate.prefecture}{candidate.city}{candidate.town} {candidate.kyoto_street}{candidate.koaza}{candidate?.corporation?.block_lot}{candidate.building}{candidate.floor}</span>\n    </>\n  );\n\n  const renderCandidatesContainer: RenderSuggestionsContainer = ({ containerProps, children }) => {\n    const { ref, className, ...restOfContainerProps } = containerProps;\n    return (\n      <div {...restOfContainerProps} className={`${className} divide-y divide-gray-200 divide-solid`}>\n        {candidates !== undefined && (\n          candidates instanceof Error ? (\n            <div ref={ref}>\n              <ul className=\"react-autosuggest__suggestions-list\">\n                <li className=\"react-autosuggest__suggestion\">\n                  <span className=\"text-base text-red-300 mr-2\">取得時にエラーが発生しました</span>\n                  <span className=\"text-sm text-red-200\">{candidates.message}</span>\n                </li>\n              </ul>\n            </div>\n          ) : (\n            <>\n              <div className=\"overflow-y-scroll max-h-48\" ref={ref}>{children}</div>\n              <div className=\"text-sm text-gray-400 py-1 px-4 flex flex-row justify-end\">\n                <div>{String(candidates.count)}件</div>\n              </div>\n            </>\n          )\n        )}\n      </div>\n    );\n  };\n\n  return (\n    <section className=\"flex flex-col\">\n      <style jsx global>{`\n.react-autosuggest__container {\n  @apply relative;\n}\n\n.react-autosuggest__input {\n  @apply text-lg p-2 m-0 w-full rounded-md border border-gray-200;\n}\n\n.react-autosuggest__input--focused {\n  @apply focus:outline-none;\n}\n\n.react-autosuggest__input--open {\n}\n\n.react-autosuggest__suggestions-container {\n  @apply absolute z-10 hidden rounded-md border border-gray-200;\n}\n\n.react-autosuggest__suggestions-container--open {\n  @apply block;\n}\n\n.react-autosuggest__suggestions-list {\n  @apply m-0 p-0;\n}\n\n.react-autosuggest__suggestion {\n  @apply cursor-pointer py-2 px-4 flex flex-row flex-nowrap items-baseline;\n}\n\n.react-autosuggest__suggestion--highlighted {\n  @apply bg-blue-100;\n}\n\n.container {\n  @apply flex;\n}\n      \n      `}</style>\n      <header className=\"flex-1 align-center\">\n        <h1 className=\"mb-5 text-3xl font-bold text-gray-500\">郵便番号逆引き検索</h1>\n      </header>\n      <main className=\"flex-1\">\n        <div>\n          <div className=\"mb-2\">\n            <label>住所を入力</label>\n            <p>\n              例: <span className=\"bg-gray-200 p-1 mr-1\">愛知県</span> <span className=\"bg-gray-200 p-1 mr-1\">横浜市 港北区</span>\n            </p>\n          </div>\n          <div className=\"text-lg w-full md:w-9/12\">\n            <Autosuggest\n              suggestions={candidates !== undefined && !(candidates instanceof Error) ? candidates.data : [SENTINEL]}\n              onSuggestionsFetchRequested={onCandidatesRequested}\n              onSuggestionsClearRequested={onCandidatesClearRequested}\n              onSuggestionSelected={onCandidateSelected}\n              getSuggestionValue={(candidate) => `${candidate.prefecture}${candidate.city}${candidate.town} ${candidate.kyoto_street || ''}${candidate.koaza || ''}${candidate?.corporation?.block_lot || ''}${candidate.building || ''}${candidate.floor || ''}`}\n              renderSuggestion={renderCandidate}\n              renderSuggestionsContainer={renderCandidatesContainer}\n              inputProps={{\n                placeholder: '住所を入力',\n                value: address,\n                onChange: (e) => {\n                  const value = (e.currentTarget as HTMLInputElement).value;\n                  if (typeof value === 'string') {\n                    setAddress((e.currentTarget as HTMLInputElement).value);\n                  }\n                },\n              }}\n            />\n          </div>\n        </div>\n      </main>\n    </section>\n  );\n};\n\nexport default ReverseLookup;\n","import React from 'react';\n\nconst Index: React.FunctionComponent = () => {\n  return <section className=\"flex flex-col\">\n    <header>\n      <h1 className=\"mb-5 text-3xl font-bold text-gray-500\">ケンオール デモページ</h1>\n    </header>\n    <main>\n      <p className=\"mb-2 hidden md:block\">サイドバーからデモを選択してください。</p>\n      <p className=\"mb-2 md:hidden\">右上のハンバーガーメニューからデモを選択してください。</p>\n      <p className=\"mb-2\">このデモのソースコードは<a href=\"https://github.com/ken-all/kenall-js-demo\">こちら</a>です。</p>\n    </main>\n  </section>\n};\n\nexport default Index;\n","import React from 'react';\nimport { Link, Switch, Route } from 'react-router-dom';\nimport Index from './pages/index';\nimport Lookup from './pages/lookup';\nimport ReverseLookup from './pages/reverse-lookup';\n\nfunction App() {\n  const [menuShown, setMenuShown] = React.useState<boolean>(false);\n\n  return (\n    <div className=\"flex flex-col md:flex-row overflow-hidden min-h-screen relative\" onClick={(e) => {e.stopPropagation(); setMenuShown(false);}}>\n      <aside className=\"md:h-none h-screen md:static absolute inset-0\">\n        <header className=\"bg-gray-200 md:bg-transparent h-15 md:h-none flex items-center\">\n          <h1 className=\"py-3 px-5 md:pt-5 text-lg flex-grow\"><Link to=\"/\">ケンオール</Link></h1>\n          <button className=\"block md:hidden px-2 py-1 m-2\" onClick={(e) => { e.stopPropagation(); setMenuShown(!menuShown) }}>\n            <svg className=\"w-6 h-6\" fill=\"currentColor\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path fillRule=\"evenodd\" d=\"M3 5a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 10a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 15a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z\" clipRule=\"evenodd\"></path></svg>\n          </button>\n        </header>\n        <ul className={'duration-500 transion-right md:transition-none bg-white md:bg-transparent md:block p-5 md:p-0 md:mx-5 md:my-0 absolute top-10 bottom-0 w-1/2 md:w-auto md:static md:right-auto ' + (menuShown ? 'right-0' : '-right-full')}>\n          <li><Link to=\"/lookup\" className=\"text-gray-500 block\">郵便番号正引き検索</Link></li>\n          <li><Link to=\"/reverse-lookup\" className=\"text-gray-500 block\">郵便番号逆引き検索</Link></li>\n        </ul>\n      </aside>\n      <main className=\"z-10 md:flex-1 px-5 md:py-5 mt-16 md:m-0\">\n        <Switch>\n          <Route path=\"/lookup\">\n            <Lookup />\n          </Route>\n          <Route path=\"/reverse-lookup\">\n            <ReverseLookup />\n          </Route>\n          <Route path=\"/\">\n            <Index />\n          </Route>\n        </Switch> \n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport App from './App';\nimport './index.css';\n\nconst baseUrl = process.env.REACT_APP_BASE_URL || '/';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router basename={baseUrl}>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}